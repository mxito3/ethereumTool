from web3 import Web3, HTTPProvider
from web3.middleware import geth_poa_middleware
import time

import json
import web3
from solc import compile_source
from web3.contract import ConciseContract
w3 = Web3(HTTPProvider('http://localhost:8545'))
# w3=Web3(Web3.IPCProvider("~/.ethereum/geth.ipc"))
w3.middleware_stack.inject(geth_poa_middleware, layer=0)  #use ipc
w3.isConnected(),'connect fail 请打开geth'
ourAddress =w3.toChecksumAddress("0x4ffa4508e02cc585f5ea209967039ba345effc88")
to=w3.toChecksumAddress("0x6efb59decd7d384b79735987bffe0d84f8ae9274")
ourAddress =w3.toChecksumAddress("0x944d3721e19fecbf52a7c1721308d2b9208a9c53")
key = '0x204d5994c246ff9a3075eca90d6ce6e6b4dff01c750a5e7a6e11a1845c83d261'
# Solidity source code
contract_source_code = '''
pragma solidity ^0.4.21;

contract Greeter {
    string public greeting;

    function Greeter() public {
        greeting = 'Hello';
    }

    function setGreeting(string _greeting) public {
        greeting = _greeting;
    }

    function greet() view public returns (string) {
        return greeting;
    }
}
'''

bytecode='0x'+'608060405234801561001057600080fd5b506040805190810160405280600581526020017f48656c6c6f0000000000000000000000000000000000000000000000000000008152506000908051906020019061005c929190610062565b50610107565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100a357805160ff19168380011785556100d1565b828001600101855582156100d1579182015b828111156100d05782518255916020019190600101906100b5565b5b5090506100de91906100e2565b5090565b61010491905b808211156101005760008160009055506001016100e8565b5090565b90565b61044f806101166000396000f3fe608060405234801561001057600080fd5b506004361061005e576000357c010000000000000000000000000000000000000000000000000000000090048063a413686214610063578063cfae32171461011e578063ef690cc0146101a1575b600080fd5b61011c6004803603602081101561007957600080fd5b810190808035906020019064010000000081111561009657600080fd5b8201836020820111156100a857600080fd5b803590602001918460018302840111640100000000831117156100ca57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610224565b005b61012661023e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561016657808201518184015260208101905061014b565b50505050905090810190601f1680156101935780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101a96102e0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101e95780820151818401526020810190506101ce565b50505050905090810190601f1680156102165780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b806000908051906020019061023a92919061037e565b5050565b606060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102d65780601f106102ab576101008083540402835291602001916102d6565b820191906000526020600020905b8154815290600101906020018083116102b957829003601f168201915b5050505050905090565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103765780601f1061034b57610100808354040283529160200191610376565b820191906000526020600020905b81548152906001019060200180831161035957829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106103bf57805160ff19168380011785556103ed565b828001600101855582156103ed579182015b828111156103ec5782518255916020019190600101906103d1565b5b5090506103fa91906103fe565b5090565b61042091905b8082111561041c576000816000905550600101610404565b5090565b9056fea165627a7a723058208f908662357c91690e0e4794f5fd1ee09ea97c557bc812cd9cfbf6e383ce06ec0029'
abi='[{"constant":false,"inputs":[{"name":"_greeting","type":"string"}],"name":"setGreeting","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"greet","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"greeting","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]'
# set pre-funded account as sender
w3.eth.defaultAccount = ourAddress


Greeter = w3.eth.contract(abi=abi, bytecode=bytecode)

print('{}'.format(abi))

nonce = w3.eth.getTransactionCount(ourAddress) 
transaction = {
     'data':bytecode,     #1ether
     'gas': 2000000,
     'gasPrice': 2100000,
     'nonce': nonce
}


#签名
signed = w3.eth.account.signTransaction(transaction, key)


#When you run sendRawTransaction, you get back the hash of the transaction:
transactionHash=w3.eth.sendRawTransaction(signed.rawTransaction)  
print("waiting for mined")
tx_receipt=w3.eth.waitForTransactionReceipt(transactionHash, timeout=120)



# Create the contract instance with the newly-deployed address
contract_address = tx_receipt.contractAddress
print("打包成功,hash值是{}".format(contract_address))
greeter = w3.eth.contract(
    address=contract_address,
    abi=abi,
)

# Display the default greeting from the contract
# print('Default contract greeting: {}'.format(
#     greeter.functions.greet().call()
# ))

# print('Setting the greeting to Nihao...')
# tx_hash = greeter.functions.setGreeting('Nihao').transact()

# # Wait for transaction to be mined...
# w3.eth.waitForTransactionReceipt(tx_hash)

# # Display the new greeting value
# print('Updated contract greeting: {}'.format(
#     greeter.functions.greet().call()
# ))

# # When issuing a lot of reads, try this more concise reader:
# reader = ConciseContract(greeter)
# assert reader.greet() == "Nihao"
